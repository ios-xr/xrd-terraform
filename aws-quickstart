#!/usr/bin/env bash
# Quick-start script to bring up XRd in AWS.

set -o errexit
set -o nounset
set -o pipefail

usage()  {
    >&2 cat << EOF
USAGE:
    aws-quickstart [OPTIONS] -u XR_USERNAME -p XR_PASSWORD

EOF
}

long_usage() {
    >&2 cat << EOF
Create or destroy an AWS EKS cluster with XRd workload.

EOF
    usage
    >&2 cat << EOF
ARGS:
    -u, --username
           XR username.

    -p, --password
           XR password.

OPTIONS:
    -a, --ami
            AMI ID of an image used to launch the EKS worker nodes (default: use
            (or create) an AMI from the XRd Packer scripts at
            https://github.com/ios-xr/xrd-packer)

    -d, --destroy
            Destroy the workload and infrastructure.

    --kubernetes-version
            Kubernetes version to use.  This must be one of: 1.23, 1.24, 1.25, 1.26, 1.27, 1.28
            (default: 1.28).
EOF
}

# Default arguments.
AMI_ID=""
DESTROY=""
KUBERNETES_VERSION="1.28"

# Parse the arguments
while [ $# -gt 0 ]; do
  case $1 in
    -u|--username )
      XR_USERNAME="$2"
      shift
      ;;
    -p|--password )
      XR_PASSWORD="$2"
      shift
      ;;
    -a|--ami )
      AMI_ID="$2"
      shift
      ;;
    -d|--destroy )
      DESTROY=1
      ;;
    --kubernetes-version )
      KUBERNETES_VERSION="$2"
      shift
      ;;
    -h|--help )
      long_usage
      exit 255
      ;;
  esac
  shift
done

ERROR=""
if [ -z "${XR_USERNAME:-}" -a -z "$DESTROY" ]; then
  >&2 echo "error: XR username (-u|--username) must be specified"
  ERROR=1
fi
if [ -z "${XR_PASSWORD:-}" -a -z "$DESTROY" ]; then
  >&2 echo "error: XR password (-p|--password) must be specified"
  ERROR=1
fi

if [ "${KUBERNETES_VERSION}" != "1.23" ] &&
   [ "${KUBERNETES_VERSION}" != "1.24" ] &&
   [ "${KUBERNETES_VERSION}" != "1.25" ] &&
   [ "${KUBERNETES_VERSION}" != "1.26" ] &&
   [ "${KUBERNETES_VERSION}" != "1.27" ] &&
   [ "${KUBERNETES_VERSION}" != "1.28" ]; then
    >&2 echo "error: Kubernetes version (--kubernetes-version) must be one of: 1.23, 1.24, 1.25, 1.26, 1.27, 1.28"
    ERROR=1
fi

if [ -n "${ERROR}" ]; then
    >&2 echo ""
    usage
    >&2 echo "For more information try --help."
    exit 1
fi

SCRIPT_DIR="$(dirname "$(realpath "$0")")"

run_packer () {
  rm -rf xrd-packer
  git clone https://github.com/ios-xr/xrd-packer xrd-packer
  cd xrd-packer
  packer init .
  packer build -var kubernetes_version="$KUBERNETES_VERSION" amazon-ebs.pkr.hcl
  cd ..
  rm -rf xrd-packer
}

ensure_ami_exists () {
  first_image=$(aws ec2 describe-images \
    --filters \
      "Name=tag:Generated_By,Values=xrd-packer" \
      "Name=tag:Kubernetes_Version,Values=${KUBERNETES_VERSION}" \
    --query "Images[*].[ImageId]" \
    --output text \
    | head -n 1)
  if [ -z "$first_image" ]; then
    run_packer
  fi
}

terraform_apply () {
  terraform -chdir="$SCRIPT_DIR"/examples/bootstrap init
  terraform -chdir="$SCRIPT_DIR"/examples/overlay/infra init
  terraform -chdir="$SCRIPT_DIR"/examples/overlay/workload init

  tfvars="${SCRIPT_DIR}/examples/overlay/workload/quickstart.auto.tfvars"
  echo "xr_root_user=\"$XR_USERNAME\"" > "$tfvars"
  echo "xr_root_password=\"$XR_PASSWORD\"" >> "$tfvars"

  if [ -n "$AMI_ID" ]; then
    echo "node_ami=\"$AMI_ID\"" >> "$tfvars"
  fi

  trap terraform_destroy ERR EXIT

  terraform -chdir="$SCRIPT_DIR"/examples/bootstrap apply -auto-approve -var cluster_version="$KUBERNETES_VERSION"
  terraform -chdir="$SCRIPT_DIR"/examples/overlay/infra apply -auto-approve
  terraform -chdir="$SCRIPT_DIR"/examples/overlay/workload apply -auto-approve

  trap - ERR EXIT
}

terraform_destroy () {
  terraform -chdir="$SCRIPT_DIR"/examples/overlay/workload destroy -auto-approve
  terraform -chdir="$SCRIPT_DIR"/examples/overlay/infra destroy -auto-approve
  terraform -chdir="$SCRIPT_DIR"/examples/bootstrap destroy -auto-approve
  rm -f "$SCRIPT_DIR"/examples/overlay/workload/quickstart.auto.tfvars
}

if [ -z "$DESTROY" ]; then
  ensure_ami_exists
  terraform_apply
else
  terraform_destroy
fi
